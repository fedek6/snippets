{
    "componentChunkName": "component---src-pages-mdx-fields-category-mdx-fields-sub-category-mdx-fields-short-slug-js",
    "path": "/typescript/basics/maps/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Maps","date":"December 14, 2021","description":"Maps in TS"},"fields":{"subCategory":"basics"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Maps\",\n  \"date\": \"2021-12-14\",\n  \"description\": \"Maps in TS\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Maps\"), mdx(LiveExample, {\n    link: \"https://jsfiddle.net/fedek6/t13z70q2\",\n    mdxType: \"LiveExample\"\n  }), mdx(\"p\", null, \"The Map object holds key-value pairs and remembers the original insertion order of the keys.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"class Task {\\n  constructor(public id: number, public task: string, public complete: bolean = false) {}\\n\\n    toString() {\\n        const {id, task, complete} = this;\\n\\n        return `${id} ${task} ${complete}`;\\n    }\\n}\\n\\ntype TaskMap = Map<number, Task>;\\n\\nclass TaskCollection {\\n  private nextId: number = 1;\\n  private taskMap: TaskMap = new Map();\\n\\n  addTask(task: string): number {\\n        while (this.getTaskById(this.nextId)) {\\n            this.nextId++;\\n        }\\n        this.taskMap.set(this.nextId, new Task(this.nextId, task));\\n\\n        return this.nextId;\\n  }\\n\\n    getTaskById(id: number): Task {\\n        return this.taskMap.get(id);\\n    }\\n\\n    getAllTasks(): TaskMap {\\n        return this.taskMap;\\n    }\\n}\\n\\nconst myTaskCollection = new TaskCollection();\\nmyTaskCollection.addTask(\\\"Swim in the ocean\\\");\\nmyTaskCollection.addTask(\\\"Catch the dragon\\\");\\n\\n\\nconst allTasks = myTaskCollection.getAllTasks();\\n\\n// If you don't know if you can iterate object:\\n// typeof allTasks[Symbol.iterator] === \\u201Cfunction\\u201D\\nfor([key, value] of allTasks) {\\n    console.log(value);\\n}\\n\")), mdx(\"h2\", null, \"When to use Maps?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When adding and removing a lot of items.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When order of added items is important.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When you need simple iteration (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"for of\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"foreach\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Maps are faster when storing large collections.\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"allMdx":{"group":[{"fieldValue":"basics","edges":[{"node":{"frontmatter":{"title":"Assertions"},"fields":{"shortSlug":"assertions","subCategory":"basics"},"slug":"typescript/basics/assertions/"}},{"node":{"frontmatter":{"title":"The basics of types"},"fields":{"shortSlug":"types","subCategory":"basics"},"slug":"typescript/basics/types/"}},{"node":{"frontmatter":{"title":"Basic classes"},"fields":{"shortSlug":"classes","subCategory":"basics"},"slug":"typescript/basics/classes/"}},{"node":{"frontmatter":{"title":"Maps"},"fields":{"shortSlug":"maps","subCategory":"basics"},"slug":"typescript/basics/maps/"}}],"totalCount":4},{"fieldValue":"data-types","edges":[{"node":{"frontmatter":{"title":"Enums"},"fields":{"shortSlug":"enums","subCategory":"data-types"},"slug":"typescript/data-types/enums/"}},{"node":{"frontmatter":{"title":"Arrays"},"fields":{"shortSlug":"arrays","subCategory":"data-types"},"slug":"typescript/data-types/arrays/"}}],"totalCount":2}]}},"pageContext":{"id":"385a4ffe-87d2-5cf2-a75e-aecb7d7d1856","fields__category":"typescript","fields__subCategory":"basics","fields__shortSlug":"maps","__params":{"fields__category":"typescript","fields__subCategory":"basics","fields__shortSlug":"maps"}}},
    "staticQueryHashes": ["2420640694"]}