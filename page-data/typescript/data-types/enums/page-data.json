{
    "componentChunkName": "component---src-pages-mdx-fields-category-mdx-fields-sub-category-mdx-fields-short-slug-js",
    "path": "/typescript/data-types/enums/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Enums","date":"January 6, 2022","description":"How to use enums"},"fields":{"subCategory":"data-types"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Enums\",\n  \"date\": \"2022-01-06\",\n  \"description\": \"How to use enums\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Enums\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Enum\"), \" is a collection of elements that for readability can be used by keys (names).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"enum Product {\\n  Foo,\\n  Bar,\\n  FooBar,\\n}\\n\\nconsole.log(Product.Foo); // 0\\nconsole.log(Product.Bar); // 1\\nconsole.log(Product.FooBar); // 2\\n\\n// Reverse mapping\\nconst productName = Product[Product.Foo];\\nconsole.log(productName); // Foo\\n\")), mdx(\"p\", null, \"As you can see \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enum\"), \" simply stores numeric value in a key.\"), mdx(\"h2\", null, \"Specific value enums\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"enum Product {\\n  Hat,\\n  Gloves = 20,\\n  Umbrella,\\n}\\n\")), mdx(\"p\", null, \"Means:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"declare enum Product {\\n  Hat = 0,\\n  Gloves = 20,\\n  Umbrella = 21,\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Warning!\"), \" Compiler can duplicate values and overwrite them this way.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Attention!\"), \" These features can be useful, but close attention is required to avoid accidentally creating duplicate values or unexpected results. Keep Enums simple and leave the compiler to generate numbers wherever possible.\"), mdx(\"h2\", null, \"String enums\"), mdx(\"p\", null, \"Enums can store strings also:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"enum City {\\n  London = \\\"London\\\",\\n  Paris = \\\"Paris\\\",\\n  NY = \\\"New York\\\",\\n}\\nconsole.log(`${City.NY}`); // New York\\n\")), mdx(\"h2\", null, \"Possible problems with enums\"), mdx(\"p\", null, \"This won't break compilation:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"enum FooBar {\\n  Foo = 1,\\n  Bar = 2\\n}\\n\\nconst testValue: FooBar = 0; // There's no 0 value in FooBar!\\n\")), mdx(\"p\", null, \"Also you won't be able to type guard an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enum\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"enum Product {\\n  Hat,\\n  Gloves,\\n  Umbrella,\\n}\\n\\nlet productValue: Product = Product.Hat;\\nif (typeof productValue === \\\"number\\\") {\\n  console.log(\\\"Value is a number\\\");\\n}\\n\\nlet unionValue: number | Product = Product.Hat;\\nif (typeof unionValue === \\\"number\\\") {\\n  console.log(\\\"Value is a number\\\");\\n}\\n\")), mdx(\"h2\", null, \"Constant enums\"), mdx(\"p\", null, \"Constant enums are only compiler directives.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const enum Product {\\n  Hat,\\n  Gloves,\\n  Umbrella,\\n}\\n\\nconsole.log(Product.Hat);\\n\")), mdx(\"p\", null, \"Compiles into:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\\"use strict\\\";\\nconsole.log(0 /* Hat */);\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Attention!\"), \" This is an advanced feature that is rarely required in most projects. Performance is faster in constant Enums.\"), mdx(\"h2\", null, \"How enums work in js\"), mdx(\"p\", null, \"Previous example compiles to:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"var Product;\\n(function (Product) {\\n    Product[Product[\\\"Foo\\\"] = 0] = \\\"Foo\\\";\\n    Product[Product[\\\"Bar\\\"] = 1] = \\\"Bar\\\";\\n    Product[Product[\\\"FooBar\\\"] = 2] = \\\"FooBar\\\";\\n})(Product || (Product = {}));\\n\")), mdx(\"p\", null, \"This snippet simply modifies \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Product\"), \" variable to be this object:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"{\\n    \\\"0\\\": \\\"Foo\\\",\\n    \\\"1\\\": \\\"Bar\\\",\\n    \\\"2\\\": \\\"FooBar\\\",\\n    \\\"Foo\\\": 0,\\n    \\\"Bar\\\": 1,\\n    \\\"FooBar\\\": 2\\n}\\n\")), mdx(\"p\", null, \"It uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\"\n  }, \"IIFE\"), \" to modify empty var. In one line it generates two types of keys. This shows how smart are \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"TypeScript\"), \" developers \\uD83E\\uDD2F\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"allMdx":{"group":[{"fieldValue":"advanced","edges":[{"node":{"frontmatter":{"title":"Decorators"},"fields":{"shortSlug":"decorators","subCategory":"advanced"},"slug":"typescript/advanced/decorators/"}}],"totalCount":1},{"fieldValue":"basics","edges":[{"node":{"frontmatter":{"title":"Assertions"},"fields":{"shortSlug":"assertions","subCategory":"basics"},"slug":"typescript/basics/assertions/"}},{"node":{"frontmatter":{"title":"The basics of types"},"fields":{"shortSlug":"types","subCategory":"basics"},"slug":"typescript/basics/types/"}},{"node":{"frontmatter":{"title":"Maps"},"fields":{"shortSlug":"maps","subCategory":"basics"},"slug":"typescript/basics/maps/"}},{"node":{"frontmatter":{"title":"Basic classes"},"fields":{"shortSlug":"classes","subCategory":"basics"},"slug":"typescript/basics/classes/"}}],"totalCount":4},{"fieldValue":"data-types","edges":[{"node":{"frontmatter":{"title":"Enums"},"fields":{"shortSlug":"enums","subCategory":"data-types"},"slug":"typescript/data-types/enums/"}},{"node":{"frontmatter":{"title":"Arrays"},"fields":{"shortSlug":"arrays","subCategory":"data-types"},"slug":"typescript/data-types/arrays/"}}],"totalCount":2}]}},"pageContext":{"id":"2a8103c7-959e-5c05-b889-7e6e367214fa","fields__category":"typescript","fields__subCategory":"data-types","fields__shortSlug":"enums","__params":{"fields__category":"typescript","fields__subCategory":"data-types","fields__shortSlug":"enums"}}},
    "staticQueryHashes": ["2420640694"]}