{
    "componentChunkName": "component---src-pages-mdx-fields-category-mdx-fields-sub-category-mdx-fields-short-slug-js",
    "path": "/typescript/data-types/arrays/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Arrays","date":"January 5, 2022","description":"The basics of arrays"},"fields":{"subCategory":"data-types"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Arrays\",\n  \"date\": \"2022-01-05\",\n  \"description\": \"The basics of arrays\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Arrays\"), mdx(\"p\", null, \"TypeScript doesn't change the flexible sizing of arrays, but it does allow the data types they contain to be restricted through the use of type annotations.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let prices: number[] = [100, 75, 42];\\nlet names: string[] = [\\\"Hat\\\", \\\"Gloves\\\", \\\"Umbrella\\\"];\\n\\nprices.forEach((price: number, index: number) => {\\n  console.log(names[index], calculateTax(price));\\n});\\n\")), mdx(\"p\", null, \"This can be typed using alternative syntax:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let prices: Array<number> = [100, 75, 42];\\nlet names: Array<string> = [\\\"Hat\\\", \\\"Gloves\\\", \\\"Umbrella\\\"];\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Warning!\"), \" This will bring error in tsx files.\"), mdx(\"h2\", null, \"Array good practices\"), mdx(\"h3\", null, \"\\u2714\\uFE0F Avoid using inferred array types\"), mdx(\"p\", null, \"As you can see, this might lead to mistakes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// declare let prices: (string | number)[]\\nlet prices = [100, 75, 42, \\\"20\\\"];\\n\\nconst calculateTax = (prices: Array<number>): Array<number> => {\\n  return prices.map((price) => price * 0.23);\\n};\\n\\n// \\u274C Argument of type '(string | number)[]' is not assignable to parameter of type 'number[]'\\ncalculateTax(prices);\\n\")), mdx(\"h3\", null, \"\\u2714\\uFE0F Always type empty arrays\"), mdx(\"p\", null, \"This will be typed as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"any\"), \" which is a very bad practice:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let prices = [];\\n\")), mdx(\"h2\", null, \"Tuples\"), mdx(\"p\", null, \"Tuples are special type of arrays. They have fixed length and must be annotiated:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let helloTuple: [string, number] = [\\\"foo\\\", 100];\\n\\nhelloTuple.forEach((e: string | number) => { console.log(e) });\\n\")), mdx(\"h3\", null, \"Tuple types\"), mdx(\"p\", null, \"You can create an array of tuples:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let products: [string, number][] = [\\n  [\\\"Hat\\\", 100],\\n  [\\\"Gloves\\\", 75],\\n];\\n\")), mdx(\"p\", null, \"And then unionize typle with other type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let tupleUnion: ([string, number] | boolean)[] = [\\n  true,\\n  false,\\n  ...products,\\n];\\n\")), mdx(\"p\", null, \"Also you can create an alias of a tuple:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"type tupleType = [string, number];\\n\\nlet products: tupleType[] = [\\n  [\\\"Hat\\\", 100],\\n  [\\\"Gloves\\\", 75],\\n];\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"allMdx":{"group":[{"fieldValue":"advanced","edges":[{"node":{"frontmatter":{"title":"Decorators"},"fields":{"shortSlug":"decorators","subCategory":"advanced"},"slug":"typescript/advanced/decorators/"}}],"totalCount":1},{"fieldValue":"basics","edges":[{"node":{"frontmatter":{"title":"Assertions"},"fields":{"shortSlug":"assertions","subCategory":"basics"},"slug":"typescript/basics/assertions/"}},{"node":{"frontmatter":{"title":"The basics of types"},"fields":{"shortSlug":"types","subCategory":"basics"},"slug":"typescript/basics/types/"}},{"node":{"frontmatter":{"title":"Maps"},"fields":{"shortSlug":"maps","subCategory":"basics"},"slug":"typescript/basics/maps/"}},{"node":{"frontmatter":{"title":"Basic classes"},"fields":{"shortSlug":"classes","subCategory":"basics"},"slug":"typescript/basics/classes/"}}],"totalCount":4},{"fieldValue":"data-types","edges":[{"node":{"frontmatter":{"title":"Enums"},"fields":{"shortSlug":"enums","subCategory":"data-types"},"slug":"typescript/data-types/enums/"}},{"node":{"frontmatter":{"title":"Arrays"},"fields":{"shortSlug":"arrays","subCategory":"data-types"},"slug":"typescript/data-types/arrays/"}}],"totalCount":2}]}},"pageContext":{"id":"89118caa-47fb-53b8-8b76-17ae2272a8ad","fields__category":"typescript","fields__subCategory":"data-types","fields__shortSlug":"arrays","__params":{"fields__category":"typescript","fields__subCategory":"data-types","fields__shortSlug":"arrays"}}},
    "staticQueryHashes": ["2420640694"]}