{
    "componentChunkName": "component---src-pages-mdx-fields-category-mdx-fields-sub-category-mdx-fields-short-slug-js",
    "path": "/javascript/basics/for-loops/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"For loops","date":"May 12, 2022","description":"All for loops"},"fields":{"subCategory":"basics"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"For loops\",\n  \"date\": \"2022-05-12\",\n  \"description\": \"All for loops\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"For loops\"), mdx(\"h2\", null, \"Basic for loop\"), mdx(LiveExample, {\n    link: \"https://jsfiddle.net/fedek6/c0v9zftj/\",\n    mdxType: \"LiveExample\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"for ([initialization]; [condition]; [final-expression])\\n   statement\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const testArray = [\\\"first element\\\", \\\"second element\\\", \\\"third element\\\"];\\n\\n// Simplest example\\nfor (let i = 0; i < testArray.length; i++) {\\n  console.log(testArray[i]);\\n}\\n\\n// Omiting initialization block\\nlet i = 0;\\nfor (; i < testArray.length; i++) {\\n  console.log(testArray[i]);\\n}\\n\\n// Omiting condition block\\nfor (let i = 0; ; i++) {\\n  if (i === testArray.length) break;\\n  console.log(testArray[i]);\\n}\\n\\n// Omitting init, condition and final-expression block\\nlet a = 0;\\nfor (;;) {\\n  if (a === testArray.length) break;\\n  console.log(testArray[a]);\\n  a++;\\n}\\n\")), mdx(\"h2\", null, \"for of loop\"), mdx(VersionTag, {\n    version: \"ES6\",\n    mdxType: \"VersionTag\"\n  }), mdx(LiveExample, {\n    link: \"https://jsfiddle.net/fedek6/gmkL4pbz/\",\n    mdxType: \"LiveExample\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for of\"), \" loop works on iterable objects such as arrays, strings, sets and maps.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// For of on arrays\\nconst arrayExample = [1, 2, 3, 4, 5, 6, 7, 8, 9];\\n\\nfor (let element of arrayExample) {\\n  console.log(element);\\n}\\n\\n// Working on objects\\nconst objectExample = { a: 1, b: 2, c: 3 };\\n\\n/* Because object literal is non-iterable\\n    we need to use Object.keys to create an array */\\nfor (let key of Object.keys(objectExample)) {\\n  console.log(key, objectExample[key]);\\n}\\n\\n// Values only\\nfor (let value of Object.values(objectExample)) {\\n  console.log(value);\\n}\\n\\n// We can also work by using Object.entries method\\nfor (let [key, value] of Object.entries(objectExample)) {\\n  console.log(key, value);\\n}\\n\\n// Working with sets\\nconst exampleSet = new Set(Object.values(objectExample));\\nfor (let value of exampleSet) {\\n  console.log(value);\\n}\\n\\n// Working with maps\\nconst exampleMap = new Map(Object.entries(objectExample));\\n\\n/* It's very similiar to working on objects\\n  by using Object.entries*/\\nfor (let [key, value] of exampleMap) {\\n  console.log(key, value);\\n}\\n\")), mdx(\"h2\", null, \"for await\"), mdx(VersionTag, {\n    version: \"ES8\",\n    mdxType: \"VersionTag\"\n  }), mdx(LiveExample, {\n    link: \"https://jsfiddle.net/fedek6/dq98nzuf/\",\n    mdxType: \"LiveExample\"\n  }), mdx(\"p\", null, \"This loop is used for iterating async iterable objects.\\nStatement of this type can be used only in async functions.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"async function* exampleGenerator() {\\n  let i = 0;\\n  while (i < 3) {\\n    yield i++;\\n  }\\n}\\n\\n(async () => {\\n  for await (const num of exampleGenerator()) {\\n    console.log(num);\\n  }\\n})();\\n\\n/* Working on real async code*/\\nconst wait = (duration) => {\\n  return new Promise((resolve, reject) => {\\n    if (duration < 0) {\\n      reject(new Error(\\\"Duration cannot be negative\\\"));\\n    }\\n\\n    setTimeout(() => {\\n      resolve(duration);\\n    }, duration);\\n  });\\n};\\n\\nfunction random(min, max) {\\n  return Math.floor(Math.random() * (max - min + 1)) + min;\\n}\\n\\nfunction randomSeconds() {\\n  return random(1000, 4000);\\n}\\n\\n// Create four promises with random time\\nasync function* exampleAsyncGenerator() {\\n  let i = 0;\\n  while (i < 4) {\\n    i++;\\n    yield wait(randomSeconds());\\n  }\\n}\\n\\n// Sequentially awaiting for all promises\\n(async () => {\\n  for await (const num of exampleAsyncGenerator()) {\\n    console.log(num);\\n  }\\n})();\\n\")), mdx(\"h2\", null, \"for in\"), mdx(LiveExample, {\n    link: \"https://jsfiddle.net/fedek6/zsa8xhkL/\",\n    mdxType: \"LiveExample\"\n  }), mdx(\"p\", null, \"This type of a loop works even with non-iterable objects.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for in\"), \" loop will go through all iterable properties.\\nFor example built-in method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toString\"), \" is not iterable the same as properties using symbols for names.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const objectExample = { a: 1, b: 2, c: 3 };\\n\\n// Basic example\\nfor (let key in objectExample) {\\n  console.log(objectExample[key]);\\n}\\n\\n/* Converting object keys to array\\nbasically it's Object.keys functionality */\\nlet a = [];\\ni = 0;\\nfor (a[i++] in objectExample);\\n\\nconsole.log(a);\\n\\n// Array example\\nconst arrayExample = [\\\"test 1\\\", \\\"test 2\\\", \\\"test 3\\\"];\\n\\n/* If you want to work on values instead of keys,\\n    it's a lot easier to use for of loop! */\\nfor (let key in arrayExample) {\\n  console.log(key);\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"allMdx":{"group":[{"fieldValue":"advanced","edges":[{"node":{"frontmatter":{"title":"Flatten array of Maps"},"fields":{"shortSlug":"flatten-array-of-maps","subCategory":"advanced"},"slug":"javascript/advanced/flatten-array-of-maps/"}},{"node":{"frontmatter":{"title":"Asynchronous chunking"},"fields":{"shortSlug":"asynchronous-chunking","subCategory":"advanced"},"slug":"javascript/advanced/asynchronous-chunking/"}}],"totalCount":2},{"fieldValue":"basics","edges":[{"node":{"frontmatter":{"title":"For loops"},"fields":{"shortSlug":"for-loops","subCategory":"basics"},"slug":"javascript/basics/for-loops/"}},{"node":{"frontmatter":{"title":"Strings"},"fields":{"shortSlug":"strings","subCategory":"basics"},"slug":"javascript/basics/strings/"}},{"node":{"frontmatter":{"title":"Promises"},"fields":{"shortSlug":"promises","subCategory":"basics"},"slug":"javascript/basics/promises/"}},{"node":{"frontmatter":{"title":"instanceof operator"},"fields":{"shortSlug":"instanceof-operator","subCategory":"basics"},"slug":"javascript/basics/instanceof-operator/"}},{"node":{"frontmatter":{"title":"in operator"},"fields":{"shortSlug":"in-operator","subCategory":"basics"},"slug":"javascript/basics/in-operator/"}},{"node":{"frontmatter":{"title":"Nullish Coalescing Operator"},"fields":{"shortSlug":"nullish-coalescing-operator","subCategory":"basics"},"slug":"javascript/basics/nullish-coalescing-operator/"}},{"node":{"frontmatter":{"title":"Optional chaining"},"fields":{"shortSlug":"optional-chaining","subCategory":"basics"},"slug":"javascript/basics/optional-chaining/"}},{"node":{"frontmatter":{"title":"Destructuring assignment"},"fields":{"shortSlug":"destructuring","subCategory":"basics"},"slug":"javascript/basics/destructuring/"}},{"node":{"frontmatter":{"title":"Symbols"},"fields":{"shortSlug":"symbols","subCategory":"basics"},"slug":"javascript/basics/symbols/"}}],"totalCount":9},{"fieldValue":"debug","edges":[{"node":{"frontmatter":{"title":"console.log usage"},"fields":{"shortSlug":"console-log","subCategory":"debug"},"slug":"javascript/debug/console-log/"}}],"totalCount":1},{"fieldValue":"dom","edges":[{"node":{"frontmatter":{"title":"querySelector"},"fields":{"shortSlug":"query-selector","subCategory":"dom"},"slug":"javascript/dom/query-selector/"}}],"totalCount":1},{"fieldValue":"events","edges":[{"node":{"frontmatter":{"title":"Long mouse event"},"fields":{"shortSlug":"long-mouse-event","subCategory":"events"},"slug":"javascript/events/long-mouse-event/"}},{"node":{"frontmatter":{"title":"Event delegation"},"fields":{"shortSlug":"event-delegation","subCategory":"events"},"slug":"javascript/events/event-delegation/"}}],"totalCount":2},{"fieldValue":"math","edges":[{"node":{"frontmatter":{"title":"Random number in the range"},"fields":{"shortSlug":"random-number","subCategory":"math"},"slug":"javascript/math/random-number/"}}],"totalCount":1}]}},"pageContext":{"id":"b22789de-5d6e-5bac-8b32-bb9c77ea53de","fields__category":"javascript","fields__subCategory":"basics","fields__shortSlug":"for-loops","__params":{"fields__category":"javascript","fields__subCategory":"basics","fields__shortSlug":"for-loops"}}},
    "staticQueryHashes": ["2420640694"]}