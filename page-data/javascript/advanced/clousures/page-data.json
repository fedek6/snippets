{
    "componentChunkName": "component---src-pages-mdx-fields-category-mdx-fields-sub-category-mdx-fields-short-slug-js",
    "path": "/javascript/advanced/clousures/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Closures","date":"July 12, 2022","description":"Example of closures"},"fields":{"subCategory":"advanced"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Closures\",\n  \"date\": \"2022-07-12\",\n  \"description\": \"Example of closures\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Closures\"), mdx(LiveExample, {\n    link: \"https://jsfiddle.net/fedek6/pjcvt4uh/\",\n    mdxType: \"LiveExample\"\n  }), mdx(\"p\", null, \"JavaScript is a language with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"first-class\"), \" functions. It allows you to create lexically scoped name bindings.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"In short\"), \": a closure is a record storing a function together with an environment.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let scope = \\\"I'm global\\\";\\n\\nfunction checkScope() {\\n  let scope = \\\"I'm local\\\";\\n  function f() {\\n    return scope;\\n  }\\n  return f;\\n}\\n\\nconsole.log(checkScope()()); // I'm local\\n\")), mdx(\"p\", null, \"You can use this environment as a function state:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let uniqueInteger = (function () {\\n  let counter = 0;\\n  return function () {\\n    return counter++;\\n  };\\n})();\\n\\nconsole.log(uniqueInteger()); // 0\\nconsole.log(uniqueInteger()); // 1\\nconsole.log(uniqueInteger()); // 2\\n\")), mdx(\"p\", null, \"You can also encapsulate multiple methods in a closure:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function counter() {\\n  let counter = 0;\\n  return {\\n    uniqueInteger: function () {\\n      return counter++;\\n    },\\n    reset: function () {\\n      counter = 0;\\n    },\\n  };\\n}\\n\\nconst c = counter();\\nconsole.log(c.uniqueInteger()); // 0\\nconsole.log(c.uniqueInteger()); // 1\\nc.reset();\\nconsole.log(c.uniqueInteger()); // 0\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This very similiar to creating an object using OOP, in fact JavaScript function is an object! Some might say that closures are objects in functional programming.\")), mdx(\"p\", null, \"You can also use getters and setters:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function gsCounter(n) {\\n  return {\\n    get count() {\\n      return n++;\\n    },\\n    set count(m) {\\n      n = m;\\n    },\\n  };\\n}\\n\\nconst d = gsCounter(0);\\nconsole.log(d.count); // 0\\nd.count = 100;\\nconsole.log(d.count); // 100\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"allMdx":{"group":[{"fieldValue":"advanced","edges":[{"node":{"frontmatter":{"title":"Closures"},"fields":{"shortSlug":"clousures","subCategory":"advanced"},"slug":"javascript/advanced/clousures/"}},{"node":{"frontmatter":{"title":"Asynchronous chunking"},"fields":{"shortSlug":"asynchronous-chunking","subCategory":"advanced"},"slug":"javascript/advanced/asynchronous-chunking/"}}],"totalCount":2},{"fieldValue":"arrays","edges":[{"node":{"frontmatter":{"title":"Array.from() method"},"fields":{"shortSlug":"array-from","subCategory":"arrays"},"slug":"javascript/arrays/array-from/"}}],"totalCount":1},{"fieldValue":"basics","edges":[{"node":{"frontmatter":{"title":"Double NOT (!!)"},"fields":{"shortSlug":"double-not-operator","subCategory":"basics"},"slug":"javascript/basics/double-not-operator/"}},{"node":{"frontmatter":{"title":"For loops"},"fields":{"shortSlug":"for-loops","subCategory":"basics"},"slug":"javascript/basics/for-loops/"}},{"node":{"frontmatter":{"title":"Strings"},"fields":{"shortSlug":"strings","subCategory":"basics"},"slug":"javascript/basics/strings/"}},{"node":{"frontmatter":{"title":"Promises"},"fields":{"shortSlug":"promises","subCategory":"basics"},"slug":"javascript/basics/promises/"}},{"node":{"frontmatter":{"title":"instanceof operator"},"fields":{"shortSlug":"instanceof-operator","subCategory":"basics"},"slug":"javascript/basics/instanceof-operator/"}},{"node":{"frontmatter":{"title":"in operator"},"fields":{"shortSlug":"in-operator","subCategory":"basics"},"slug":"javascript/basics/in-operator/"}},{"node":{"frontmatter":{"title":"Nullish Coalescing Operator"},"fields":{"shortSlug":"nullish-coalescing-operator","subCategory":"basics"},"slug":"javascript/basics/nullish-coalescing-operator/"}},{"node":{"frontmatter":{"title":"Optional chaining"},"fields":{"shortSlug":"optional-chaining","subCategory":"basics"},"slug":"javascript/basics/optional-chaining/"}},{"node":{"frontmatter":{"title":"Destructuring assignment"},"fields":{"shortSlug":"destructuring","subCategory":"basics"},"slug":"javascript/basics/destructuring/"}},{"node":{"frontmatter":{"title":"Symbols"},"fields":{"shortSlug":"symbols","subCategory":"basics"},"slug":"javascript/basics/symbols/"}}],"totalCount":10},{"fieldValue":"debug","edges":[{"node":{"frontmatter":{"title":"console.log usage"},"fields":{"shortSlug":"console-log","subCategory":"debug"},"slug":"javascript/debug/console-log/"}}],"totalCount":1},{"fieldValue":"dom","edges":[{"node":{"frontmatter":{"title":"querySelector"},"fields":{"shortSlug":"query-selector","subCategory":"dom"},"slug":"javascript/dom/query-selector/"}}],"totalCount":1},{"fieldValue":"events","edges":[{"node":{"frontmatter":{"title":"Long mouse event"},"fields":{"shortSlug":"long-mouse-event","subCategory":"events"},"slug":"javascript/events/long-mouse-event/"}},{"node":{"frontmatter":{"title":"Event delegation"},"fields":{"shortSlug":"event-delegation","subCategory":"events"},"slug":"javascript/events/event-delegation/"}}],"totalCount":2},{"fieldValue":"math","edges":[{"node":{"frontmatter":{"title":"Random number in the range"},"fields":{"shortSlug":"random-number","subCategory":"math"},"slug":"javascript/math/random-number/"}}],"totalCount":1},{"fieldValue":"objects","edges":[{"node":{"frontmatter":{"title":"Filtering"},"fields":{"shortSlug":"filtering","subCategory":"objects"},"slug":"javascript/objects/filtering/"}},{"node":{"frontmatter":{"title":"Flattening objects"},"fields":{"shortSlug":"flattening-objects","subCategory":"objects"},"slug":"javascript/objects/flattening-objects/"}}],"totalCount":2}]}},"pageContext":{"id":"325d1f30-94a8-5e77-bfb4-90f1dd44694e","fields__category":"javascript","fields__subCategory":"advanced","fields__shortSlug":"clousures","__params":{"fields__category":"javascript","fields__subCategory":"advanced","fields__shortSlug":"clousures"}}},
    "staticQueryHashes": ["2420640694"]}